import platform
import subprocess
import sys
from neuron import h


def check_mpi_installation():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ MPI –Ω–∞ macOS"""
    print(f"üîç Detailed MPI diagnostics on {platform.system()}:")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é —Å–∏—Å—Ç–µ–º—ã
    if platform.system() == "Darwin":
        print(f"   macOS version: {platform.mac_ver()[0]}")
        print(f"   Architecture: {platform.machine()}")

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ MPI –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    mpi_commands = ['mpirun --version', 'mpiexec --version', 'which mpirun', 'which mpiexec']

    for cmd in mpi_commands:
        try:
            result = subprocess.run(cmd.split(), capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                print(f"   ‚úÖ {cmd}: {result.stdout.strip()[:100]}")
            else:
                print(f"   ‚ùå {cmd}: {result.stderr.strip()[:100]}")
        except Exception as e:
            print(f"   ‚ùå {cmd}: {e}")

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    import os
    mpi_env_vars = ['OMPI_MCA_btl', 'OMPI_MCA_plm', 'MPICH_VERSION', 'I_MPI_ROOT']
    print(f"   Environment variables:")
    for var in mpi_env_vars:
        value = os.environ.get(var, 'Not set')
        print(f"     {var}: {value}")

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º NEURON MPI capabilities
    print(f"   NEURON MPI capabilities:")
    try:
        print(f"     NEURON version: {h.nrnversion()}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MPI —Ñ—É–Ω–∫—Ü–∏–π
        mpi_functions = [
            ('h.nrnmpi_init', hasattr(h, 'nrnmpi_init')),
            ('h.nrnmpi_is_initialized', hasattr(h, 'nrnmpi_is_initialized')),
            ('h.nrnmpi_numprocs', hasattr(h, 'nrnmpi_numprocs')),
            ('h.nrnmpi_myid', hasattr(h, 'nrnmpi_myid')),
        ]

        for func_name, available in mpi_functions:
            status = "‚úÖ" if available else "‚ùå"
            print(f"     {func_name}: {status}")

    except Exception as neuron_error:
        print(f"     ‚ùå NEURON MPI check failed: {neuron_error}")


def test_mpi_initialization():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MPI"""
    print(f"\nüß™ Testing MPI initialization methods:")

    # –ú–µ—Ç–æ–¥ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    try:
        print(f"   Method 1: Standard h.nrnmpi_init()")
        h.nrnmpi_init()
        pc = h.ParallelContext()
        rank = int(pc.id())
        nhost = int(pc.nhost())
        print(f"   ‚úÖ Success: rank={rank}, nhost={nhost}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if hasattr(h, 'nrnmpi_is_initialized'):
            init_status = h.nrnmpi_is_initialized()
            print(f"   MPI initialized: {init_status}")

        return pc, rank, nhost, "standard"

    except Exception as std_error:
        print(f"   ‚ùå Standard method failed: {std_error}")

    # –ú–µ—Ç–æ–¥ 2: –ë–µ–∑ MPI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    try:
        print(f"   Method 2: ParallelContext without MPI")
        pc = h.ParallelContext()
        rank = 0
        nhost = 1
        print(f"   ‚úÖ Success (single process): rank={rank}, nhost={nhost}")
        return pc, rank, nhost, "no_mpi"

    except Exception as no_mpi_error:
        print(f"   ‚ùå No-MPI method failed: {no_mpi_error}")

    # –ú–µ—Ç–æ–¥ 3: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–¥–∏–Ω–æ—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    try:
        print(f"   Method 3: Force single process mode")
        import os
        os.environ['NEURON_MPI'] = '0'  # –û—Ç–∫–ª—é—á–∞–µ–º MPI –≤ NEURON

        pc = h.ParallelContext()
        rank = 0
        nhost = 1
        print(f"   ‚úÖ Success (forced single): rank={rank}, nhost={nhost}")
        return pc, rank, nhost, "forced_single"

    except Exception as forced_error:
        print(f"   ‚ùå Forced single method failed: {forced_error}")

    raise RuntimeError("All MPI initialization methods failed")


def check_parallel_context_capabilities(pc, rank, nhost, method):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ParallelContext"""
    print(f"\nüîß Testing ParallelContext capabilities (method: {method}):")

    capabilities = {}

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    test_functions = [
        ('pc.id()', lambda: pc.id()),
        ('pc.nhost()', lambda: pc.nhost()),
        ('pc.timeout(0)', lambda: pc.timeout(0)),
        ('pc.set_maxstep(10)', lambda: pc.set_maxstep(10)),
        ('pc.barrier()', lambda: pc.barrier()),
        ('pc.gid_exists(999)', lambda: pc.gid_exists(999)),
    ]

    for func_name, func in test_functions:
        try:
            result = func()
            capabilities[func_name] = True
            print(f"   ‚úÖ {func_name}: {result}")
        except Exception as e:
            capabilities[func_name] = False
            print(f"   ‚ùå {func_name}: {e}")

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è macOS
    if platform.system() == "Darwin":
        print(f"   macOS specific tests:")

        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        try:
            test_gid = 12345
            pc.set_gid2node(test_gid, rank)
            print(f"   ‚úÖ set_gid2node works")
            capabilities['set_gid2node'] = True
        except Exception as e:
            print(f"   ‚ùå set_gid2node failed: {e}")
            capabilities['set_gid2node'] = False

    return capabilities


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    check_mpi_installation()

    try:
        pc, rank, nhost, method = test_mpi_initialization()
        capabilities = check_parallel_context_capabilities(pc, rank, nhost, method)

        print(f"\nüìä Summary:")
        print(f"   Method used: {method}")
        print(f"   Rank: {rank}, Hosts: {nhost}")
        print(f"   Capabilities: {sum(capabilities.values())}/{len(capabilities)} working")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è macOS
        if platform.system() == "Darwin":
            print(f"\nüí° macOS Recommendations:")
            if method == "no_mpi" or method == "forced_single":
                print(f"   ‚úÖ Use single-process mode for macOS")
                print(f"   ‚úÖ Avoid pc.psolve() - use h.continuerun()")
                print(f"   ‚úÖ Set h.cvode_active(0) for stability")
            else:
                print(f"   ‚ö†Ô∏è MPI working but may be unstable on macOS")

    except Exception as main_error:
        print(f"\n‚ùå All tests failed: {main_error}")