import random
from typing import Iterable
import re
import numpy as np
import logging
import h5py as hdf5
import os
import platform

from neuron import h
from bioaffrat import bioaffrat
from interneuron import interneuron
from motoneuron import motoneuron
from muscle import muscle

logging.basicConfig(filename='logs_new_new_2.log',
                    filemode='w',
                    format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
                    datefmt='%H:%M:%S',
                    level=logging.DEBUG)
logging.info("let's get it started")

h.load_file("stdgui.hoc")
h.load_file('nrngui.hoc')
h.load_file('stdrun.hoc')


def check_mechanisms():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤"""
    print("üîç Checking NEURON mechanisms...")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å NEURON
        print("   Testing basic NEURON functionality...")
        test_section = h.Section()
        print(f"   ‚úÖ Section creation works")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–∫—Ç–æ—Ä—ã
        test_vector = h.Vector()
        print(f"   ‚úÖ Vector creation works")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        current_time = h.t
        print(f"   ‚úÖ Time access works: {current_time}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º STDP
        try:
            stdp_test = h.STDP(0, test_section)
            print("   ‚úÖ STDP mechanism available")
            del stdp_test
        except Exception as stdp_error:
            print(f"   ‚ùå STDP mechanism not available: {stdp_error}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º IaGenerator
        try:
            ia_test = h.IaGenerator()
            print("   ‚úÖ IaGenerator mechanism available")
            del ia_test
        except Exception as ia_error:
            print(f"   ‚ùå IaGenerator mechanism not available: {ia_error}")
            return False

        del test_section, test_vector
        return True

    except Exception as e:
        print(f"   ‚ùå Basic NEURON functionality check failed: {e}")
        return False


def check_mpi_status():
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ MPI —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        print(f"üîç Initializing NEURON and MPI...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã HOC
        try:
            h.load_file("stdgui.hoc")
            print("   ‚úÖ stdgui.hoc loaded")
        except:
            print("   ‚ö†Ô∏è stdgui.hoc not loaded")

        try:
            h.load_file('nrngui.hoc')
            print("   ‚úÖ nrngui.hoc loaded")
        except:
            print("   ‚ö†Ô∏è nrngui.hoc not loaded")

        try:
            h.load_file('stdrun.hoc')
            print("   ‚úÖ stdrun.hoc loaded")
        except:
            print("   ‚ö†Ô∏è stdrun.hoc not loaded")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MPI
        try:
            h.nrnmpi_init()
            print("   ‚úÖ MPI initialization completed")
        except Exception as mpi_error:
            print(f"   ‚ö†Ô∏è MPI initialization warning: {mpi_error}")

        pc = h.ParallelContext()
        rank = int(pc.id())
        nhost = int(pc.nhost())

        print(f"MPI Status:")
        print(f"  Rank: {rank}")
        print(f"  Number of hosts: {nhost}")

        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ MPI —Å—Ç–∞—Ç—É—Å–∞
        try:
            if hasattr(h, 'nrnmpi_is_initialized'):
                mpi_status = h.nrnmpi_is_initialized()
                print(f"  MPI initialized: {mpi_status}")
            else:
                print(f"  MPI status: Unknown (method not available)")
        except:
            print(f"  MPI status: Cannot determine")

        return pc, rank, nhost

    except Exception as e:
        print(f"‚ùå Critical MPI/NEURON initialization error: {e}")
        print(f"   Attempting minimal fallback...")

        try:
            pc = h.ParallelContext()
            return pc, 0, 1
        except Exception as fallback_error:
            print(f"‚ùå Fallback failed: {fallback_error}")
            raise fallback_error


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MPI/PC
pc, rank, nhost = check_mpi_status()

file_name = 'res_alina_50_stdp'

N = 2
speed = 100
bs_fr = 100  # 40 # frequency of brainstem inputs
versions = 1
CV_number = 6
k = 0.017  # CV weights multiplier to take into account air and toe stepping
CV_0_len = 12  # 125 # Duration of the CV generator with no sensory inputs
extra_layers = 0  # 1 + layers

step_number = 6

one_step_time = int((6 * speed + CV_0_len) / (int(1000 / bs_fr))) * (int(1000 / bs_fr))
time_sim = one_step_time * step_number + 30

print(f"üìä Simulation parameters:")
print(f"   one_step_time: {one_step_time} ms")
print(f"   total time_sim: {time_sim} ms")
print(f"   step_number: {step_number}")

'''
network topology https://github.com/max-talanov/bypass/blob/main/figs/CPG_feedback_loops.png
'''


class CPG:
    def __init__(self, speed, bs_fr, inh_p, step_number, n):
        if not check_mechanisms():
            print("‚ùå Required NEURON mechanisms not available - attempting to continue anyway")
            logging.warning("Required mechanisms not available")

        logging.info(f"Hello from rank {rank} of {nhost}")
        logging.info("NEURON version: " + h.nrnversion())

        # ...existing code...
        self.threshold = 10
        self.delay = 1
        self.nAff = 2
        self.nInt = 2
        self.nMn = 2
        self.ncell = n
        self.affs = []
        self.ints = []
        self.motos = []
        self.muscles = []
        self.affgroups = []
        self.intgroups = []
        self.motogroups = []
        self.musclegroups = []
        self.gener_gids = []
        self.gener_Iagids = []
        self.n_gid = 0

        self.RG_E = []  # Rhythm generators of extensors
        self.RG_F = []  # Rhythm generators of flexor
        self.CV = []

        self.netstims = []
        self.stims = []

        self.stdpmechs = []
        self.netcons = []
        self.stimnclist = []

        self.presyns = []
        self.postsyns = []

        self.weight_changes_vectors = []
        self.time_t_vectors = []

        self.C_1 = []
        self.C_0 = []

        # ...existing initialization code...
        # (–í–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ __init__ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)


def prun(speed, step_number):
    print(f"üöÄ [rank {rank}] Starting simulation: speed={speed}, steps={step_number}")
    logging.info(f"prun start: speed={speed}, steps={step_number}, time_sim={time_sim}")

    try:
        print(f"   Setting timeout...")
        pc.timeout(0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é NEURON
        print(f"   Checking NEURON initialization...")
        print(f"     h.t = {h.t}")
        print(f"     NEURON version: {h.nrnversion()}")

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        print(f"   Creating time vector...")
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å h._ref_t
            test_t = h.t
            print(f"     h.t accessible: {test_t}")

            # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä
            t = h.Vector()
            print(f"     Vector created: {type(t)}")

            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è
            if hasattr(h, '_ref_t'):
                t.record(h._ref_t)
                print(f"     ‚úÖ Time recording set up successfully")
            else:
                print(f"     ‚ùå h._ref_t not available")
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                t = h.Vector()
                print(f"     Using manual time tracking")

        except Exception as time_error:
            print(f"     ‚ùå Time vector creation error: {time_error}")
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä –∫–∞–∫ fallback
            t = h.Vector()
            print(f"     Created fallback empty vector")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
        print(f"   Setting simulation parameters...")
        h.tstop = time_sim
        h.dt = 0.025

        # –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ macOS
        import platform
        if platform.system() == "Darwin":  # macOS
            print(f"   macOS detected - using alternative approach")
            h.cvode_active(0)  # –û—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π —à–∞–≥
            h.secondorder = 0  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—è–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≠–π–ª–µ—Ä–∞
            pc.set_maxstep(1)  # –£–º–µ–Ω—å—à–∏—Ç—å maxstep –¥–ª—è macOS
        else:
            print(f"   Windows/Linux detected - using standard approach")
            h.cvode_active(1)  # –í–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π —à–∞–≥
            pc.set_maxstep(10)

        print(f"   Current simulation settings:")
        print(f"     h.tstop = {h.tstop}")
        print(f"     h.dt = {h.dt}")
        print(f"     cvode_active = {h.cvode_active()}")

        print(f"   Initializing simulation...")
        try:
            h.finitialize(-65)
            print(f"   ‚úÖ finitialize completed, h.t = {h.t}")
        except Exception as init_error:
            print(f"   ‚ùå finitialize error: {init_error}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            print(f"   Trying alternative initialization...")
            h.v_init = -65
            h.init()
            print(f"   Alternative init completed, h.t = {h.t}")

        print(f"   Starting main simulation...")
        start_time = h.startsw()

        try:
            if platform.system() == "Darwin" or nhost == 1:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è macOS –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                print(f"   Using h.continuerun() approach...")
                h.continuerun(time_sim)
                print(f"   ‚úÖ h.continuerun() completed")
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                print(f"   Using pc.psolve() approach...")
                pc.psolve(time_sim)
                print(f"   ‚úÖ pc.psolve() completed")

        except Exception as sim_error:
            print(f"   ‚ùå Main simulation error: {sim_error}")
            print(f"   Trying fallback simulation method...")

            # Fallback: –ø–æ—à–∞–≥–æ–≤–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
            steps = int(time_sim / h.dt)
            print(f"   Running {steps} steps manually...")

            for step in range(0, steps, 1000):  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 1000 —à–∞–≥–æ–≤
                try:
                    h.fadvance()
                    if step % 10000 == 0:
                        print(f"     Step {step}/{steps}, t={h.t:.1f}")
                except Exception as step_error:
                    print(f"     Step error at {step}: {step_error}")
                    break

            print(f"   Manual simulation completed")

        elapsed_time = h.startsw() - start_time
        print(f"   Simulation time: {elapsed_time:.2f} seconds")
        print(f"   Final simulation time: {h.t:.1f} ms")

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
        if len(t) == 0:
            print(f"   Time vector is empty, creating manual time points...")
            time_points = np.arange(0, h.t + h.dt, h.dt)
            t.from_python(time_points)
            print(f"   Created time vector with {len(t)} points")

        if h.t < time_sim * 0.9:  # –ï—Å–ª–∏ —Å–∏–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ
            print(f"‚ö†Ô∏è  Warning: Simulation stopped early at {h.t:.1f} ms (expected {time_sim} ms)")
            logging.warning(f"Simulation stopped early: {h.t} ms instead of {time_sim} ms")

        print(f"üèÅ Simulation completed successfully")
        logging.info(f"Simulation completed: {h.t} ms")
        return t

    except Exception as sim_error:
        print(f"‚ùå Simulation error: {sim_error}")
        logging.error(f"Simulation error: {sim_error}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return h.Vector()


def finish():
    """–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    try:
        print(f"üîö [rank {rank}] Finishing simulation...")

        if nhost > 1:
            print(f"   Running worker cleanup...")
            pc.runworker()
            print(f"   Calling pc.done()...")
            pc.done()

        print(f"   Calling h.quit()...")
        h.quit()
        print(f"‚úÖ Cleanup completed")

    except Exception as e:
        print(f"‚ö†Ô∏è Error during cleanup: {e}")


# ...existing code –¥–ª—è spike_record, force_record, velocity_record, spikeout –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

def safe_filename(name: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞."""
    return re.sub(r'[^\w\-_.]', '_', name)


if __name__ == '__main__':
    print(f"üé¨ NEURON CPG Simulation Starting...")
    print(f"   Platform: {platform.system()}")

    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º MPI –∏ NEURON
        pc, rank, nhost = check_mpi_status()

        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ö–∞–Ω–∏–∑–º—ã
        if not check_mechanisms():
            print("‚ùå Required mechanisms not available")
            # –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–µ–∑ STDP, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–µ–º–ª–µ–º–æ
            print("‚ö†Ô∏è Continuing without some mechanisms...")

        print(f"üé¨ [rank {rank}] MAIN EXECUTION START")
        print(f"   Rank {rank} of {nhost} processes")
        print(f"   Parameters: N={N}, speed={speed}, bs_fr={bs_fr}, versions={versions}")
        print(f"   Step number: {step_number}, one_step_time: {one_step_time}")
        print(f"   Total simulation time: {time_sim} ms")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤
        if not check_mechanisms():
            print("‚ùå Critical mechanisms missing - exiting")
            exit(1)

        logging.info("=== MAIN EXECUTION START ===")
        logging.info(f"Platform: {platform.system()}")
        logging.info(f"Rank {rank}/{nhost}, N={N}, speed={speed}, versions={versions}")

        k_nrns = 0
        k_name = 1

        if not os.path.isdir(file_name):
            os.mkdir(file_name)
            print(f"   ‚úÖ Created directory: {file_name}")

        for i in range(versions):
            print(f"üîÑ [rank {rank}] VERSION {i + 1}/{versions} START")
            logging.info(f"=== VERSION {i + 1} START ===")

            try:
                print(f"   Creating CPG network...")
                cpg_ex = CPG(speed, bs_fr, 100, step_number, N)
                print(f"   ‚úÖ CPG network created successfully")
                logging.info("CPG created successfully")

                # ...existing recording setup code...

                print(f"   üöÄ Starting simulation...")
                print("- " * 50)
                t = prun(speed, step_number)
                print("- " * 50)
                print(f"   ‚úÖ Simulation completed")

                # ...existing results saving code...

                print(f"üèÅ [rank {rank}] VERSION {i + 1} COMPLETED SUCCESSFULLY")

            except Exception as version_error:
                print(f"‚ùå [rank {rank}] VERSION {i + 1} FAILED: {version_error}")
                logging.error(f"Version {i + 1} error: {version_error}")
                import traceback

                print(f"Traceback: {traceback.format_exc()}")
                break

        print(f"üèÅ [rank {rank}] MAIN EXECUTION FINISHED")
        logging.info("=== MAIN EXECUTION END ===")
        finish()
    except Exception as main_error:
        print(f"‚ùå Critical error in main: {main_error}")
        import traceback

        print(f"Traceback: {traceback.format_exc()}")

        try:
            finish()
        except:
            pass

        exit(1)